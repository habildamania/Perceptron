# -*- coding: utf-8 -*-
"""perceptron.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CIuxdqQ12t17JLG6YPvYkamg1PQvvVhR
"""

import numpy as np

W= [1,-1,0]
X= [[1,0,1],[0,-1,-1],[-1,-0.5,-1]]
Y=[-1,1,1]
pred_lbl=[]

#for i in range (0,3):
 # 
#print(bcd)  
  ##X[0]
#h = np.dot(W,X[0])
#h = sum(np.transpose(W)*X[0])
#print(h)
flag = False

def SignFunc(h):
  if h>=0:
    return 1
  else:
    return -1

def UpdateWeight(t,o,W,X):
  eta=0.1
  for i in range(len(W)):
    W[i]=W[i]+ eta*(t-o)*X[i]
  return W

while(flag != True):
  del pred_lbl[:]
  for i in range(len(X[0])):
    h = sum(np.transpose(W)*X[i])
    #print(i,len(X[0]))
    pred_lbl.insert(i,SignFunc(h))
    
    if pred_lbl[i] != Y[i]:
      t=Y[i]
      o=pred_lbl[i]
      W=UpdateWeight(t,o,W,X[i])

  count=0
  for i in range (len(Y)):
    
    if Y[i] == pred_lbl[i]:
      count=count+1
    if count == len(Y):
      flag=True
    

print(W)



